import json

def extract_cv_info(cv):
    # Combine all technical skills
    skills = (
        cv["TechnicalSkills"].get("ProgrammingLanguages", []) +
        cv["TechnicalSkills"].get("FrameworksLibraries", []) +
        cv["TechnicalSkills"].get("DatabasesCloudServices", []) +
        cv["TechnicalSkills"].get("Tools", [])
    )

    degree = cv.get("Education", {}).get("Degree", "")
    # Experience calculation could be dynamic; here we hardcode for now
    experience_years = 2  # Update this if you add experience parser

    return {
        "skills": set([s.lower() for s in skills]),
        "education.degree": degree,
        "experience.years": experience_years
    }


def evaluate_rules(rules, candidate):
    score = 0
    for rule in rules:
        if rule.type == "require":
            if rule.details["skill"].lower() not in candidate["skills"]:
                print(f"‚ùå Missing required skill: {rule.details['skill']}")
                return -999  # Hard fail
        elif rule.type == "prefer":
            if rule.details["skill"].lower() in candidate["skills"]:
                score += rule.details["weight"]
        elif rule.type == "score":
            field, op, val = rule.details["condition"]
            actual = candidate.get(field)
            if isinstance(val, str):
                passed = eval(f'"{actual}" {op} "{val}"')
            else:
                passed = eval(f"{actual} {op} {val}")
            if passed:
                score += rule.details["delta"]
    return score


from parse_dsl import parse_dsl  # or from your parser module

# DSL rule string (can be generated by LLM too)
jd = """
We are hiring a backend developer with at least 3 years of experience, strong Python skills, 
and some exposure to machine learning. A PhD is a big plus.
"""

dsl = '''
match {
  require skill "Python"
  prefer skill "Machine Learning" weight 2
  if experience.years == 0 then score +5
  if education.degree == "Bsc" then score +10
}
'''

# 1. Parse DSL into rules
rules = parse_dsl(dsl)

# 2. Load and extract info from Hung's CV
with open("Hung.json") as f:
    cv = json.load(f)

cv_info = extract_cv_info(cv)

# 3. Evaluate
score = evaluate_rules(rules, cv_info)

print(f"\nüéØ Final Match Score: {score}")
